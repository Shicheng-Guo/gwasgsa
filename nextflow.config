/*
 * -------------------------------------------------
 *  nf-core/gwasgsa Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Workflow flags
  // TODO check which are missing
  input = null //this one will not be used, just to pass nf-core lint
  outdir = './results'
  
  // mandatory
  gene_loc_file = null
  set_anot_file = null

  // optional - vcf input
  vcf_file = false

  // optional - plink input
  plink_bed = null
  plink_bim = null
  plink_fam = null

  // optional - summary_stats input
  summary_stats = null
  snp_col_name = null
  pval_col_name = null
  sample_size = null
  ref_panel_bed = null
  ref_panel_bim = null
  ref_panel_fam = null
  ref_panel_synonyms = null

  // optional - for annotation
  window = '0,0'
  snp_subset = null
  
  // optional - for gene analysis
  gene_model = 'snp-wise=mean' // Defualt: snp-wise=mean (linreg, snp-wise=mean, snp-wise=top)
  // for gene settings
  snp_min_maf = 0
  snp_min_mac = 0
  snp_max_maf = null
  snp_max_mac = null
  snp_max_miss = 0.05
  snp_diff = 1e-6
  seed = null
  burden = null // accepts numeric values. Defualt off.
  big_data = null // accepts 'on/off'. Defualt: auto-set based on input and model. Note: 'on' might fail in some models

  // optional - for geneset analysis
  // for gene settings
  gene_info = false
  outlier_up = 3 // z-score cutoff
  outlier_down = 6 // z-score cutoff
  // for model
  direction_sets = 'positive' // accepted values for all directions ‘pos’/‘positive’/‘greater’, ‘neg’/‘negative’/‘smaller’ and ‘both’/‘two’/‘twosided’/‘two-sided’
  self_contained = false
  alpha = false // either false or takes a numeric value 
  correct = 'all' // all | none
  
  // optional - for gene property anlayais
  cov_file = null

  // optional - for plot
  pvalue_cutoff = 0.05
  top_n_value = 10

  // Boilerplate options
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_ignore = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 2.GB
  max_cpus = 2
  max_time = 20.h

}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
gwasgsaImage = 'lifebitai/gwasgsa:dev' // also - latest and 1.0
prepImage = 'lifebitai/preprocess_gwas:latest'
plinkImage = 'alliecreason/plink:1.90'

process {
  container = gwasgsaImage

  withName: 'preprocessing_vcf' {
    container = prepImage
  }

  withName: 'plink' {
    container = plinkImage
  }

  withName: 'preprocess_plink' {
    container = plinkImage
  }
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  test { includeConfig 'conf/test.config' }
  test_with_vcf { includeConfig 'conf/test_vcf.config' }
  test_with_plink { includeConfig 'conf/test_plink.config' }
  test_with_sumstat { includeConfig 'conf/test_sumstat.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export this variable to prevent local Python libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/gwasgsa'
  author = 'Sangram Keshari Sahu'
  homePage = 'https://github.com/nf-core/gwasgsa'
  description = 'Gene-Set-Analysis for GWAS'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
