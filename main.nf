#!/usr/bin/env nextflow
/*
========================================================================================
                         nf-core/gwasgsa
========================================================================================
 nf-core/gwasgsa Analysis Pipeline.
 #### Homepage / Documentation
 https://github.com/nf-core/gwasgsa
----------------------------------------------------------------------------------------
*/

def helpMessage() {
    // TODO nf-core: Add to this help message with new command line parameters
    log.info nfcoreHeader()
    log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

    nextflow run nf-core/gwasgsa --reads '*_R{1,2}.fastq.gz' -profile docker

    Mandatory arguments:
      --reads [file]                Path to input data (must be surrounded with quotes)
      -profile [str]                Configuration profile to use. Can use multiple (comma separated)
                                    Available: conda, docker, singularity, test, awsbatch, <institute> and more

    Options:
      --genome [str]                  Name of iGenomes reference
      --single_end [bool]             Specifies that the input is single-end reads

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --fasta [file]                  Path to fasta reference

    Other options:
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

    AWSBatch options:
      --awsqueue [str]                The AWSBatch JobQueue that needs to be set when running on AWSBatch
      --awsregion [str]               The AWS Region for your AWS Batch job to run on
      --awscli [str]                  Path to the AWS CLI tool
    """.stripIndent()
}

// Show help message
if (params.help) {
    helpMessage()
    exit 0
}

/*
 * SET UP CONFIGURATION VARIABLES
 */

// Check if genome exists in the config file
if (params.genomes && params.genome && !params.genomes.containsKey(params.genome)) {
    exit 1, "The provided genome '${params.genome}' is not available in the iGenomes file. Currently the available genomes are ${params.genomes.keySet().join(", ")}"
}

// TODO nf-core: Add any reference files that are needed
// Configurable reference genomes
//
// NOTE - THIS IS NOT USED IN THIS PIPELINE, EXAMPLE ONLY
// If you want to use the channel below in a process, define the following:
//   input:
//   file fasta from ch_fasta
//
params.fasta = params.genome ? params.genomes[ params.genome ].fasta ?: false : false
if (params.fasta) { ch_fasta = file(params.fasta, checkIfExists: true) }

// Has the run name been specified by the user?
//  this has the bonus effect of catching both -name and --name
custom_runName = params.name
if (!(workflow.runName ==~ /[a-z]+_[a-z]+/)) {
    custom_runName = workflow.runName
}

if (workflow.profile.contains('awsbatch')) {
    // AWSBatch sanity checking
    if (!params.awsqueue || !params.awsregion) exit 1, "Specify correct --awsqueue and --awsregion parameters on AWSBatch!"
    // Check outdir paths to be S3 buckets if running on AWSBatch
    // related: https://github.com/nextflow-io/nextflow/issues/813
    if (!params.outdir.startsWith('s3:')) exit 1, "Outdir not on S3 - specify S3 Bucket to run on AWSBatch!"
    // Prevent trace files to be stored on S3 since S3 does not support rolling files.
    if (params.tracedir.startsWith('s3:')) exit 1, "Specify a local tracedir or run without trace! S3 cannot be used for tracefiles."
}

// Stage config files
ch_multiqc_config = file("$baseDir/assets/multiqc_config.yaml", checkIfExists: true)
ch_multiqc_custom_config = params.multiqc_config ? Channel.fromPath(params.multiqc_config, checkIfExists: true) : Channel.empty()
ch_output_docs = file("$baseDir/docs/output.md", checkIfExists: true)

if (params.vcf_file) {
    Channel.fromPath(params.vcf_file)
           .ifEmpty { exit 1, "VCF file containing  not found: ${params.vcf_file}" }
           .into { vcf_file; vcfs_to_split }
    vcfs_to_split
        .splitCsv(header: true)
        .map{ row -> [file(row.vcf)] }
        .set { vcfs }
}
if (!params.vcf_file) {
    vcfs = false
    vcf_file = false
}

//--------------------------------------------------------------------------

if (!params.gene_loc_file){
    exit 1, "Provide mandatory argument '--gene_loc_file'"
} 
if (params.gene_loc_file){
    Channel.fromPath(params.gene_loc_file)
        .into { ch_gene_loc_file; ch_gene_loc_file_2 }
}

if (!params.set_anot_file) {
    exit 1, "Provide mandatory argument '--set_anot_file'"
} 
if (params.set_anot_file) {
    Channel.fromPath(params.set_anot_file)
        .into { ch_set_anot; ch_set_anot_2 }
}

if (params.cov_file) {
    Channel.fromPath(params.cov_file)
        .set { ch_cov }
}

//--------------------------------------------------------------------------

if (params.plink_bed) {
    Channel.fromPath(params.plink_bed)
        .ifEmpty { exit 1, "PLINK binary pedigree file not found: ${params.bed}" }
        .set { ch_bed }
}
if (params.plink_bim) {
    Channel.fromPath(params.plink_bim)
        .ifEmpty { exit 1, "PLINK BIM file not found: ${params.bim}" }
        .set { ch_bim }
}
if (params.plink_fam) {
    Channel.fromPath(params.plink_fam)
        .ifEmpty { exit 1, "PLINK FAM file not found: ${params.fam}" }
        .set { ch_fam }
}

//--------------------------------------------------------------------------

if (params.ref_panel_bed) {
    Channel.fromPath(params.ref_panel_bed)
        .ifEmpty { exit 1, "File not found: ${params.ref_panel_bed}" }
        .set { ch_ref_panel_bed }
}
if (params.ref_panel_bim) {
    Channel.fromPath(params.ref_panel_bim)
        .ifEmpty { exit 1, "File not found: ${params.ref_panel_bim}" }
        .set { ch_ref_panel_bim }
}
if (params.ref_panel_fam) {
    Channel.fromPath(params.ref_panel_fam)
        .ifEmpty { exit 1, "File not found: ${params.ref_panel_fam}" }
        .set { ch_ref_panel_fam }
}
if (params.ref_panel_synonyms) {
    Channel.fromPath(params.ref_panel_synonyms)
        .ifEmpty { exit 1, "File not found: ${params.ref_panel_synonyms}" }
        .set { ch_ref_panel_synonyms }
}
if (!params.ref_panel_synonyms) {
    ch_ref_panel_synonyms=''
}

//--------------------------------------------------------------------------

// Header log info
log.info nfcoreHeader()
def summary = [:]
if (workflow.revision) summary['Pipeline Release'] = workflow.revision
summary['Run Name']         = custom_runName ?: workflow.runName
// TODO nf-core: Report custom parameters here
summary['Gene-Location file'] = params.gene_loc_file
summary['Annotation file']    = params.fasta
summary['Max Resources']    = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
summary['Output dir']       = params.outdir
summary['Launch dir']       = workflow.launchDir
summary['Working dir']      = workflow.workDir
summary['Script dir']       = workflow.projectDir
summary['User']             = workflow.userName
if (workflow.profile.contains('awsbatch')) {
    summary['AWS Region']   = params.awsregion
    summary['AWS Queue']    = params.awsqueue
    summary['AWS CLI']      = params.awscli
}
summary['Config Profile'] = workflow.profile
if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
if (params.email || params.email_on_fail) {
    summary['E-mail Address']    = params.email
    summary['E-mail on failure'] = params.email_on_fail
    summary['MultiQC maxsize']   = params.max_multiqc_email_size
}
log.info summary.collect { k,v -> "${k.padRight(18)}: $v" }.join("\n")
log.info "-\033[2m--------------------------------------------------\033[0m-"

// Check the hostnames against configured profiles
checkHostname()

Channel.from(summary.collect{ [it.key, it.value] })
    .map { k,v -> "<dt>$k</dt><dd><samp>${v ?: '<span style=\"color:#999999;\">N/A</a>'}</samp></dd>" }
    .reduce { a, b -> return [a, b].join("\n            ") }
    .map { x -> """
    id: 'nf-core-gwasgsa-summary'
    description: " - this information is collected when the pipeline is started."
    section_name: 'nf-core/gwasgsa Workflow Summary'
    section_href: 'https://github.com/nf-core/gwasgsa'
    plot_type: 'html'
    data: |
        <dl class=\"dl-horizontal\">
            $x
        </dl>
    """.stripIndent() }
    .set { ch_workflow_summary }

/*
 * Parse software version numbers
 */
// process get_software_versions {
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy',
//         saveAs: { filename ->
//                       if (filename.indexOf(".csv") > 0) filename
//                       else null
//                 }

//     output:
//     file 'software_versions_mqc.yaml' into ch_software_versions_yaml
//     file "software_versions.csv"

//     script:
//     // TODO nf-core: Get all tools to print their version number here
//     """
//     echo $workflow.manifest.version > v_pipeline.txt
//     echo $workflow.nextflow.version > v_nextflow.txt
//     fastqc --version > v_fastqc.txt
//     multiqc --version > v_multiqc.txt
//     scrape_software_versions.py &> software_versions_mqc.yaml
//     """
// }

/*
 * Main process starts here
 */

// this process is just for meaintain a proper channel by diverting reference panel to plink
if (params.plink_bed && params.plink_bim && params.plink_fam){
    process preprocess_plink {

        input:
        file bed from ch_bed
        file bim from ch_bim
        file fam from ch_fam

        output:
        set file("${bed}"), file("${bim}"), file("${fam}") into ch_plink_direct, ch_plink_direct_2

        script:
        """
        echo "No Modifications to files. This step used for staging the files to make a unified nextflow channel for next step."
        """
    }
}

// this process is just for meaintain a proper channel by diverting reference panel to plink 
if (!params.plink_bed && !params.plink_bim && !params.plink_fam && params.ref_panel_bed && params.ref_panel_bim && params.ref_panel_fam){
    process preprocess_ref_panel {

        input:
        file bed from ch_ref_panel_bed
        file bim from ch_ref_panel_bim
        file fam from ch_ref_panel_fam

        output:
        set file("${bed}"), file("${bim}"), file("${fam}") into ch_plink_ref_panel, ch_plink_ref_panel_2

        script:
        """
        echo "No Modifications to files. This step used for staging the files to make a unified nextflow channel for next step."
        """
    }
}

// this is only incase of summary stats file provided
if (params.summary_stats){
    Channel.fromPath(params.summary_stats)
        .set { ch_summary_stats }
}

if(params.summary_stats){
    process preprocess_summary_stats {
    
        input:
        file summary_stats from ch_summary_stats

        output:
        file('snp_p.tsv') into ch_snp_p_txt

        script:
        """
        csvtk cut -f ${params.snp_col_name},${params.pval_col_name} \
            ${summary_stats} > temp_1.txt
        awk '{gsub("${params.snp_col_name}", "SNP", \$0); print}' temp_1.txt > temp_2.txt
        awk '{gsub("${params.pval_col_name}", "P", \$0); print}' temp_2.txt > snp_p.txt
        csvtk csv2tab snp_p.txt > snp_p.tsv
        """
    }
}

// if a subset file is provided
if (params.snp_subset) {
    Channel.fromPath(params.snp_subset)
        .ifEmpty { exit 1, "A .bim file not found: ${params.snp_subset}" }
        .set { ch_snp_subset }
}
if (!params.snp_subset) {
    ch_snp_subset = ''
}

if(params.vcf_file){
    process preprocessing_vcf {
        publishDir "${params.outdir}/processed_files", mode: 'copy'
        
        input:
        file vcfs from vcfs.collect()
        file vcf_file from vcf_file

        output:
        file 'merged.vcf' into vcf_plink
        file 'sample.phe' into data

        script:
        """
        # iterate through urls in csv replacing s3 path with the local one
        urls="\$(tail -n+2 $vcf_file | awk -F',' '{print \$2}')"
        for url in \$(echo \$urls); do
            vcf="\${url##*/}"
            sed -i -e "s~\$url~\$vcf~g" $vcf_file
        done
        # bgzip uncompressed vcfs
        for vcf in \$(tail -n+2 $vcf_file | awk -F',' '{print \$2}'); do
            if [ \${vcf: -4} == ".vcf" ]; then
                    bgzip -c \$vcf > \${vcf}.gz
                    sed -i "s/\$vcf/\${vcf}.gz/g" $vcf_file 
            fi
        done
        # remove any prexisting columns for sex 
        if grep -Fq "SEX" $vcf_file; then
            awk -F, -v OFS=, 'NR==1{for (i=1;i<=NF;i++)if (\$i=="SEX"){n=i-1;m=NF-(i==NF)}} {for(i=1;i<=NF;i+=1+(i==n))printf "%s%s",\$i,i==m?ORS:OFS}' $vcf_file > tmp.csv && mv tmp.csv $vcf_file
        fi
        # determine sex of each individual from VCF file & add to csv file
        echo 'SEX' > sex.txt
        for vcf in \$(tail -n+2 $vcf_file | awk -F',' '{print \$2}'); do
            bcftools index -f \$vcf
            SEX="\$(bcftools plugin vcf2sex \$vcf)"
            if [[ \$SEX == *M ]]; then
                    echo "1" >> sex.txt
            elif [ \$SEX == *F ]]; then
                    echo "2" >> sex.txt
            fi
        done
        # make fam file & merge vcfs
        paste -d, sex.txt $vcf_file > tmp.csv && mv tmp.csv $vcf_file
        make_fam2.py $vcf_file
        vcfs=\$(tail -n+2 $vcf_file | awk -F',' '{print \$3}')
        bcftools merge --force-samples \$vcfs > merged.vcf
        """
    }

    // run plink on given vcf files
    process plink {
        publishDir "${params.outdir}/plink", mode: 'copy'
        
        input:
        file vcf from vcf_plink
        file fam from data

        output:
        set file('*.bed'), file('*.bim'), file('*.fam') into ch_plink_undirect, ch_plink_undirect_2

        script:
        """
        sed '1d' $fam > tmpfile; mv tmpfile $fam
        # remove contigs eg GL000229.1 to prevent errors
        sed -i '/^GL/ d' $vcf
        plink --vcf $vcf --make-bed
        rm plink.fam
        mv $fam plink.fam
        """
    }
}

// decide the proper channel
if (params.plink_bed && params.plink_bim && params.plink_fam){
    ch_plink = ch_plink_direct
    ch_plink_2 = ch_plink_direct_2
}
if(params.ref_panel_bed && params.ref_panel_bim && params.ref_panel_fam){
    ch_plink = ch_plink_ref_panel
    ch_plink_2 = ch_plink_ref_panel_2
} 
if(params.vcf_file){
    ch_plink = ch_plink_undirect
    ch_plink_2 = ch_plink_undirect_2
}

// MAGMA stats here

process magma_annotation {
    publishDir "${params.outdir}/magma", mode: 'copy'
    
    input:
    set file(bed), file(bim), file(fam) from ch_plink
    file(gene_loc_file) from ch_gene_loc_file
    file(snp_subset_file) from ch_snp_subset

    output:
    file('magma_out.genes.annot') into (ch_magma_anot, ch_magma_anot_2)
    file('magma_out.genes.annot.log')

    script:
    if (params.snp_subset) annotate_filter='filter=snpsubset.bim' else annotate_filter=''
    """
    mv $snp_subset_file snpsubset.bim
    magma --annotate \
        window=${params.window} ${annotate_filter} \
        --snp-loc ${bim} \
        --gene-loc ${gene_loc_file} \
        --out magma_out
    mv magma_out.log magma_out.genes.annot.log
    """
}

// create an dummy channel for ch_snp_p if summary_stats not provided
if(params.summary_stats) ch_snp_p = ch_snp_p_txt
if(!params.summary_stats) ch_snp_p = ''

process magma_gene_analysis {
    publishDir "${params.outdir}/magma", mode: 'copy'
    
    input:
    set file(bed), file(bim), file(fam) from ch_plink_2
    file(magma_anot) from ch_magma_anot
    file(snp_p_file) from ch_snp_p
    file(ref_panel_synonyms) from ch_ref_panel_synonyms

    output:
    file('magma_out.genes.raw') into (ch_genes_raw, ch_genes_raw_2)
    file('magma_out.genes.out')
    file('magma_out.genes.out.log')

    script:
    // optional params for gene analysis
    if (params.summary_stats) pval = "--pval snp_p.tsv N=" + params.sample_size else pval=''
    if(params.seed) seed = "--seed " + params.seed else seed=''
    if(params.snp_max_maf) snp_max_maf = "snp-max-maf=" + params.snp_max_maf else snp_max_maf=''
    if(params.snp_max_mac) snp_max_mac = "snp-max-mac=" + params.snp_max_mac else snp_max_mac=''
    if(params.burden) burden = "--burden " + params.burden else burden = ''
    if(params.big_data) big_data = "--big-data" + params.big_data else big_data=''
    if(params.gene_model) gene_model = "--gene-model " + params.gene_model else gene_model=''
    // exceptions with summary stats file
    if (params.summary_stats && params.gene_model == "linreg") println "Workflow Error: '--gene_model linreg' can't be used with summary stats file" exit 0
    """
    # change the names. It should be equal for all (for the purpose of upload timestamp)
    mv ${bed} plink_file.bed
    mv ${bim} plink_file.bim
    mv ${fam} plink_file.fam

    magma --bfile plink_file \
        ${pval} \
        --gene-settings \
        snp-min-maf=${params.snp_min_maf} \
        ${snp_max_maf} \
        snp-min-mac=${params.snp_min_mac} \
        ${snp_max_mac} \
        snp-max-miss=${params.snp_max_miss} \
        snp-diff=${params.snp_diff} \
        ${seed} \
        ${burden} \
        ${big_data} \
        ${gene_model} \
        --gene-annot ${magma_anot} \
        --out magma_out
    mv magma_out.log magma_out.genes.out.log
    """
}

process magma_geneset_analysis {
    publishDir "${params.outdir}/magma", mode: 'copy'
    
    input:
    file(gene_raw) from ch_genes_raw
    file(set_anot) from ch_set_anot

    output:
    file('magma_out.gsa.out') into ch_geneset
    file('*.out') // for gsa.genes.out and .gsa.self.out
    file('magma_out.gsa.out.log')

    script:
    // additional geneset settings (optional)
    if(params.gene_info) gene_info = "gene-info" else gene_info = ''
    if(params.self_contained) self_contained = "self-contained" else self_contained = ''
    if(params.alpha) alpha = "alpha=" + params.alpha else alpha=''
    """
    magma --gene-results ${gene_raw} \
        --settings outlier=${params.outlier_up},${params.outlier_down} \
        ${gene_info} \
        --model direction-sets=${params.direction_sets} \
        ${self_contained} ${alpha} \
        correct=${params.correct} \
        --set-annot ${set_anot} \
        --out magma_out
    mv magma_out.log magma_out.gsa.out.log
    """
}

if (params.cov_file){
    process magma_gene_property_analysis {
        publishDir "${params.outdir}/magma", mode: 'copy'
        
        input:
        file(gene_raw) from ch_genes_raw_2
        file(cov) from ch_cov

        output:
        file('magma_out.gsa.out.cov')
        file('magma_out.gsa.out.cov.log')

        script:
        """
        magma --gene-results ${gene_raw} \
            --gene-covar ${cov} \
            --out magma_out
        mv magma_out.gsa.out magma_out.gsa.out.cov
        mv magma_out.log magma_out.gsa.out.cov.log
        """
    }
}

process results_plots {
    publishDir "${params.outdir}/magma", mode: 'copy'
    
    input:
    file(geneset) from ch_geneset

    output:
    file('*.png') into ch_report_plot
    file('*.sorted.csv') into ch_res_sorted
    file('*.plot.csv') into ch_res_top

    script:
    """
    dot_plot.R ${geneset} ${params.pvalue_cutoff} ${params.top_n_value}
    """
}

process get_genenames {
    publishDir "${params.outdir}/magma", mode: 'copy'
    
    input:
    file(res_sorted) from ch_res_sorted
    file(res_top) from ch_res_top
    file(anot) from ch_magma_anot_2
    file(geneset) from ch_set_anot_2
    file(geneloc) from ch_gene_loc_file_2

    output:
    file("magma_out.gsa.out.sorted.genenames.tsv") into ch_report_table
    file('*top*.tsv')

    script:
    """
    gene_map.R ${res_sorted} ${anot} ${geneset} ${geneloc}
    gene_map.R ${res_top} ${anot} ${geneset} ${geneloc}
    """
}

//Rscript -e "rmarkdown::render('bin/report/report.Rmd', params = list(gsa_plot='results/magma/magma_out.gsa.out.top_10.plot.png',gsa_result='results/magma/magma_out.gsa.out.sorted.csv'))"

/*
 * report
 */
process multiqc {
    publishDir "${params.outdir}/MultiQC", mode: 'copy'

    input:
    file (report_table) from ch_report_table
    file (report_plot) from ch_report_plot
    
    output:
    file "multiqc_report.html" into ch_multiqc_report

    script:
    """
    cp /opt/bin/* .
    Rscript -e "rmarkdown::render('report.Rmd', params = list(gsa_plot='$report_plot',gsa_result='$report_table'))"
    mv report.html multiqc_report.html
    """
}

/*
 * STEP 3 - Output Description HTML
 */
// process output_documentation {
//     publishDir "${params.outdir}/pipeline_info", mode: 'copy'

//     input:
//     file output_docs from ch_output_docs

//     output:
//     file "results_description.html"

//     script:
//     """
//     markdown_to_html.py $output_docs -o results_description.html
//     """
// }

/*
 * Completion e-mail notification
 */
workflow.onComplete {

    // Set up the e-mail variables
    def subject = "[nf-core/gwasgsa] Successful: $workflow.runName"
    if (!workflow.success) {
        subject = "[nf-core/gwasgsa] FAILED: $workflow.runName"
    }
    def email_fields = [:]
    email_fields['version'] = workflow.manifest.version
    email_fields['runName'] = custom_runName ?: workflow.runName
    email_fields['success'] = workflow.success
    email_fields['dateComplete'] = workflow.complete
    email_fields['duration'] = workflow.duration
    email_fields['exitStatus'] = workflow.exitStatus
    email_fields['errorMessage'] = (workflow.errorMessage ?: 'None')
    email_fields['errorReport'] = (workflow.errorReport ?: 'None')
    email_fields['commandLine'] = workflow.commandLine
    email_fields['projectDir'] = workflow.projectDir
    email_fields['summary'] = summary
    email_fields['summary']['Date Started'] = workflow.start
    email_fields['summary']['Date Completed'] = workflow.complete
    email_fields['summary']['Pipeline script file path'] = workflow.scriptFile
    email_fields['summary']['Pipeline script hash ID'] = workflow.scriptId
    if (workflow.repository) email_fields['summary']['Pipeline repository Git URL'] = workflow.repository
    if (workflow.commitId) email_fields['summary']['Pipeline repository Git Commit'] = workflow.commitId
    if (workflow.revision) email_fields['summary']['Pipeline Git branch/tag'] = workflow.revision
    email_fields['summary']['Nextflow Version'] = workflow.nextflow.version
    email_fields['summary']['Nextflow Build'] = workflow.nextflow.build
    email_fields['summary']['Nextflow Compile Timestamp'] = workflow.nextflow.timestamp

    // TODO nf-core: If not using MultiQC, strip out this code (including params.max_multiqc_email_size)
    // On success try attach the multiqc report
    def mqc_report = null
    try {
        if (workflow.success) {
            mqc_report = ch_multiqc_report.getVal()
            if (mqc_report.getClass() == ArrayList) {
                log.warn "[nf-core/gwasgsa] Found multiple reports from process 'multiqc', will use only one"
                mqc_report = mqc_report[0]
            }
        }
    } catch (all) {
        log.warn "[nf-core/gwasgsa] Could not attach MultiQC report to summary email"
    }

    // Check if we are only sending emails on failure
    email_address = params.email
    if (!params.email && params.email_on_fail && !workflow.success) {
        email_address = params.email_on_fail
    }

    // Render the TXT template
    def engine = new groovy.text.GStringTemplateEngine()
    def tf = new File("$baseDir/assets/email_template.txt")
    def txt_template = engine.createTemplate(tf).make(email_fields)
    def email_txt = txt_template.toString()

    // Render the HTML template
    def hf = new File("$baseDir/assets/email_template.html")
    def html_template = engine.createTemplate(hf).make(email_fields)
    def email_html = html_template.toString()

    // Render the sendmail template
    def smail_fields = [ email: email_address, subject: subject, email_txt: email_txt, email_html: email_html, baseDir: "$baseDir", mqcFile: mqc_report, mqcMaxSize: params.max_multiqc_email_size.toBytes() ]
    def sf = new File("$baseDir/assets/sendmail_template.txt")
    def sendmail_template = engine.createTemplate(sf).make(smail_fields)
    def sendmail_html = sendmail_template.toString()

    // Send the HTML e-mail
    if (email_address) {
        try {
            if (params.plaintext_email) { throw GroovyException('Send plaintext e-mail, not HTML') }
            // Try to send HTML e-mail using sendmail
            [ 'sendmail', '-t' ].execute() << sendmail_html
            log.info "[nf-core/gwasgsa] Sent summary e-mail to $email_address (sendmail)"
        } catch (all) {
            // Catch failures and try with plaintext
            [ 'mail', '-s', subject, email_address ].execute() << email_txt
            log.info "[nf-core/gwasgsa] Sent summary e-mail to $email_address (mail)"
        }
    }

    // Write summary e-mail HTML to a file
    def output_d = new File("${params.outdir}/pipeline_info/")
    if (!output_d.exists()) {
        output_d.mkdirs()
    }
    def output_hf = new File(output_d, "pipeline_report.html")
    output_hf.withWriter { w -> w << email_html }
    def output_tf = new File(output_d, "pipeline_report.txt")
    output_tf.withWriter { w -> w << email_txt }

    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_red = params.monochrome_logs ? '' : "\033[0;31m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";

    if (workflow.stats.ignoredCount > 0 && workflow.success) {
        log.info "-${c_purple}Warning, pipeline completed, but with errored process(es) ${c_reset}-"
        log.info "-${c_red}Number of ignored errored process(es) : ${workflow.stats.ignoredCount} ${c_reset}-"
        log.info "-${c_green}Number of successfully ran process(es) : ${workflow.stats.succeedCount} ${c_reset}-"
    }

    if (workflow.success) {
        log.info "-${c_purple}[nf-core/gwasgsa]${c_green} Pipeline completed successfully${c_reset}-"
    } else {
        checkHostname()
        log.info "-${c_purple}[nf-core/gwasgsa]${c_red} Pipeline completed with errors${c_reset}-"
    }

}


def nfcoreHeader() {
    // Log colors ANSI codes
    c_black = params.monochrome_logs ? '' : "\033[0;30m";
    c_blue = params.monochrome_logs ? '' : "\033[0;34m";
    c_cyan = params.monochrome_logs ? '' : "\033[0;36m";
    c_dim = params.monochrome_logs ? '' : "\033[2m";
    c_green = params.monochrome_logs ? '' : "\033[0;32m";
    c_purple = params.monochrome_logs ? '' : "\033[0;35m";
    c_reset = params.monochrome_logs ? '' : "\033[0m";
    c_white = params.monochrome_logs ? '' : "\033[0;37m";
    c_yellow = params.monochrome_logs ? '' : "\033[0;33m";

    return """    -${c_dim}--------------------------------------------------${c_reset}-
                                            ${c_green},--.${c_black}/${c_green},-.${c_reset}
    ${c_blue}        ___     __   __   __   ___     ${c_green}/,-._.--~\'${c_reset}
    ${c_blue}  |\\ | |__  __ /  ` /  \\ |__) |__         ${c_yellow}}  {${c_reset}
    ${c_blue}  | \\| |       \\__, \\__/ |  \\ |___     ${c_green}\\`-._,-`-,${c_reset}
                                            ${c_green}`._,._,\'${c_reset}
    ${c_purple}  nf-core/gwasgsa v${workflow.manifest.version}${c_reset}
    -${c_dim}--------------------------------------------------${c_reset}-
    """.stripIndent()
}

def checkHostname() {
    def c_reset = params.monochrome_logs ? '' : "\033[0m"
    def c_white = params.monochrome_logs ? '' : "\033[0;37m"
    def c_red = params.monochrome_logs ? '' : "\033[1;91m"
    def c_yellow_bold = params.monochrome_logs ? '' : "\033[1;93m"
    if (params.hostnames) {
        def hostname = "hostname".execute().text.trim()
        params.hostnames.each { prof, hnames ->
            hnames.each { hname ->
                if (hostname.contains(hname) && !workflow.profile.contains(prof)) {
                    log.error "====================================================\n" +
                            "  ${c_red}WARNING!${c_reset} You are running with `-profile $workflow.profile`\n" +
                            "  but your machine hostname is ${c_white}'$hostname'${c_reset}\n" +
                            "  ${c_yellow_bold}It's highly recommended that you use `-profile $prof${c_reset}`\n" +
                            "============================================================"
                }
            }
        }
    }
}
